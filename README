
# Sistema de Gest√£o Multi-Tenant

Sistema completo de gest√£o de clientes e usu√°rios com autentica√ß√£o JWT, RBAC, multi-tenant e frontend em Next.js. Backend desenvolvido em NestJS com Prisma, PostgreSQL, dockerizado e frontend hospedado no Vercel.  

---

## üìÇ Estrutura do Projeto



/project-root
‚îú‚îÄ‚îÄ api/ # Backend NestJS
‚îú‚îÄ‚îÄ web/ # Frontend Next.js
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ README.md


---

## üõ† Tecnologias

**Backend**
- NestJS
- Prisma ORM
- PostgreSQL
- JWT + Refresh Token
- RBAC (ADMIN, USER, GUEST)
- Swagger (documenta√ß√£o da API)

**Frontend**
- Next.js
- React Query
- Tailwind CSS
- Axios
- Dashboard com KPIs

**Infraestrutura**
- Docker / Docker Compose
- Backend no Render
- Frontend no Vercel
- Banco de dados PostgreSQL dockerizado

---

## üöÄ Rodando o projeto localmente

### Pr√©-requisitos
- Node.js >= 18
- Docker e Docker Compose
- Yarn ou npm
- PostgreSQL (via Docker ou local)

### 1Ô∏è‚É£ Backend

1. Acesse a pasta `api/`:

```bash
cd api


Instale as depend√™ncias:

npm install
# ou
yarn


Configure o .env (exemplo):

DATABASE_URL=postgresql://postgres:senha@localhost:5432/dbname
JWT_SECRET=secretKey
JWT_REFRESH_SECRET=refreshSecret
PORT=3000


Execute migrations do Prisma:

npx prisma migrate dev


Inicie o servidor:

npm run start:dev
# ou
yarn start:dev


Swagger: http://localhost:3000/api

2Ô∏è‚É£ Frontend

Acesse a pasta web/:

cd web


Instale as depend√™ncias:

npm install
# ou
yarn


Configure o .env.local (exemplo):

NEXT_PUBLIC_API_URL=http://localhost:3000


Inicie o frontend:

npm run dev
# ou
yarn dev


App: http://localhost:3001 (ou porta configurada)

3Ô∏è‚É£ Dockeriza√ß√£o

Voc√™ pode rodar backend, frontend e PostgreSQL juntos usando Docker Compose:

docker-compose up --build


Isso sobe:

Backend NestJS (api)

Frontend Next.js (web)

PostgreSQL (db)

üîë Funcionalidades

Backend

Autentica√ß√£o com JWT + refresh token

Controle de acesso baseado em roles (ADMIN, USER, GUEST)

Multi-tenant via tenantId

CRUD de Usu√°rios (restrito por roles)

CRUD de Clientes (filtrado por tenantId)

Middleware Prisma para seguran√ßa e isolamento de dados

Documenta√ß√£o via Swagger

Frontend

Tela de login e autentica√ß√£o completa

Dashboard com KPIs: total de clientes, clientes ativos

CRUD de clientes integrado com backend

Listagem de usu√°rios (somente ADMIN/USER)

Layout responsivo com sidebar e header

üåê Deploy

Backend: Render

Frontend: Vercel

üìå Observa√ß√µes

Tokens expirados devem usar o endpoint /auth/refresh com o refreshToken retornado no login.

Todos os endpoints est√£o protegidos por JWT e RBAC, exceto os marcados com @Public().

Multi-tenant garante que cada usu√°rio s√≥ veja dados do pr√≥prio tenant.

‚ö° Comandos √öteis
# Backend
npm run start:dev       # Start dev
npm run start:prod      # Start prod
npx prisma migrate dev  # Aplicar migrations
npx prisma studio       # Abrir Prisma Studio

# Frontend
npm run dev             # Start dev
npm run build           # Build produ√ß√£o
npm run start           # Start produ√ß√£o




### Pr√©-requisitos
- Node.js >= 18
- Docker e Docker Compose
- Yarn ou npm
- PostgreSQL (via Docker ou local)

---

üìå Endpoints Principais
Endpoint	M√©todo	Descri√ß√£o
/api GET Ver todo a documenta√ß√£o do Swagger
/auth/register	POST	Cadastrar novo usu√°rio
/auth/login	POST	Login com email e senha
/auth/refresh	POST	Renovar access token com refresh token
/auth/logout	POST	Logout do usu√°rio
/users	GET	Listar usu√°rios (role ADMIN/USER)
/users/:id	GET	Buscar usu√°rio por id
/users	POST	Criar usu√°rio
/users/:id	PATCH	Atualizar usu√°rio
/users/:id	DELETE	Remover usu√°rio
/clients	GET	Listar clientes
/clients/:id	GET	Buscar cliente
/clients	POST	Criar cliente
/clients/:id	PATCH	Atualizar cliente
/clients/:id	DELETE	Remover cliente
üìù Exemplos de Requisi√ß√µes Postman
1Ô∏è‚É£ Registrar usu√°rio
POST /auth/register
Content-Type: application/json

{
  "name": "Danilo Vin√≠cius",
  "email": "danilo@example.com",
  "password": "12345678",
  "role": "ADMIN",
  "tenantId": "2d444f4c-3ba5-4872-b147-d9050d27545a"
}

2Ô∏è‚É£ Login
POST /auth/login
Content-Type: application/json

{
  "email": "danilo@example.com",
  "password": "12345678"
}


Resposta:

{
  "accessToken": "<JWT>",
  "refreshToken": "<JWT_REFRESH>"
}

3Ô∏è‚É£ Refresh token
POST /auth/refresh
Content-Type: application/json

{
  "refreshToken": "<JWT_REFRESH>"
}


Resposta:

{
  "accessToken": "<NOVO_JWT>"
}

4Ô∏è‚É£ Listar clientes
GET /clients
Authorization: Bearer <JWT>



Feito com  por Danilo Vin√≠cius